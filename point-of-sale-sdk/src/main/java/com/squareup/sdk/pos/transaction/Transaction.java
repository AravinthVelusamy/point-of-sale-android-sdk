package com.squareup.sdk.pos.transaction;

import android.os.Parcelable;
import android.support.annotation.Nullable;
import com.google.auto.value.AutoValue;
import com.google.gson.Gson;
import com.google.gson.TypeAdapter;
import com.ryanharter.auto.value.parcel.ParcelAdapter;
import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.Set;

/**
 * Represents the result of a transaction processed using the Square Point of Sale API.
 *
 * Transaction encapsulates the details of an exchange between a merchant and a customer.
 */
@AutoValue //
public abstract class Transaction implements Parcelable {

  /**
   * The device-generated ID of the transaction.
   *
   * Transaction objects returned by the Connect API's ListTransactions endpoint
   * include this value in the {@code client_id} field when applicable. You
   * cannot currently filter results by the value of this field, however you
   * can match against it to obtain a transaction's full details.
   */
  public abstract String clientId();

  /**
   * The server-generated ID of the transaction.
   *
   * Transaction objects returned by the Connect API's ListTransactions endpoint
   * include this value in the {@code id} field when applicable.
   *
   * Currently, serverId is the mechanism by which developers can query Connect API's endpoints.
   * Eventually, these endpoints shall be queryable by clientId so we mark this field as deprecated.
   *
   * In addition, cash and offline payments will not return a serverId so we mark this nullable.
   */
  @Deprecated @Nullable public abstract String serverId();

  /**
   * The unique ID of the location to which the transaction was credited.
   *
   * Location IDs are generated by Square for store locations listed in the <a
   * href="https://squareup.com/dashboard/">dashboard</a> and can be accessed through the <a
   * href="https://docs.connect.squareup.com/api/connect/v2/#navsection-locations">Locations
   * API</a>.
   */
  public abstract String locationId();

  /**
   * The date and time when the transaction was completed as determined by the client device.
   */
  public abstract DateTime createdAt();

  /**
   * The list of tenders used to pay in the transaction. Tenders are listed in ascending order
   * by their createdAt field.
   */
  public final Set<Tender> tenders() {
    return Collections.unmodifiableSet(autoTenders());
  }

  /**
   * Contains the order information for this transaction.
   */
  public abstract Order order();

  public static Builder builder() {
    return new AutoValue_Transaction.Builder();
  }

  // Returns a mutable set, should not be exposed.
  @ParcelAdapter(TendersTypeAdapter.class) //
  abstract Set<Tender> autoTenders();

  public abstract Builder toBuilder();

  @AutoValue.Builder //
  public abstract static class Builder {
    public Builder() {
      autoTenders(new LinkedHashSet<Tender>());
    }

    public abstract Builder clientId(String clientId);

    public abstract Builder serverId(String serverId);

    public abstract Builder locationId(String locationId);

    public abstract Builder createdAt(DateTime createdAt);

    public Builder addTender(Tender tender) {
      autoTenders().add(tender);
      return this;
    }

    public abstract Builder order(Order order);

    public Transaction build() {
      Transaction result = autoBuild();
      return result.toBuilder() //
          .autoTenders(new LinkedHashSet<>(result.tenders())) //
          .autoBuild();
    }

    abstract Set<Tender> autoTenders();

    abstract Builder autoTenders(Set<Tender> tenders);

    abstract Transaction autoBuild();
  }

  public static TypeAdapter<Transaction> typeAdapter(Gson gson) {
    return new AutoValue_Transaction.GsonTypeAdapter(gson);
  }
}
